{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to LeetCode Solutions \ud83d\ude80","text":"<p>Hey there, fellow coder! Welcome to LeetCode Solutions, your daily dose of brain exercise and problem-solving. My name is suresh chandra sekar \ud83d\udc68\u200d\ud83d\udcbb, and I'm on a mission to rekindle my coding skills after a hiatus. If you're like me, ready to bring those scattered brain cells back into action, you're in the right place.</p>"},{"location":"#about-leetcode","title":"About LeetCode \ud83e\udde0","text":"<p>Have you heard of LeetCode? It's like a big online playground where people who love coding can practice and learn. They have lots of little problems to solve, and it's a fun way to get better at programming!</p>"},{"location":"#daily-challenge","title":"Daily Challenge \ud83c\udf1f","text":"<p>As part of my daily challenge, I'm spending quality time solving problems on LeetCode. It's not just about finding solutions; it's about the journey of rediscovery. If you're here because you're on a similar journey or just looking for solutions to LeetCode questions, you've found your tribe.</p>"},{"location":"#tutorials-and-solutions","title":"Tutorials and Solutions \ud83d\udcda","text":"<p>I've been writing down how I solve the problems on LeetCode in simple terms, so even if you're just starting out, you can understand. We'll go through problems together and figure out how to solve them step by step.</p>"},{"location":"#tips-and-tricks","title":"Tips and Tricks \ud83d\udca1","text":"<p>I've also picked up some handy tips and tricks along the way that have helped me solve problems faster. I'll share those with you too, so we can all learn together.</p>"},{"location":"#join-the-community","title":"Join the Community \ud83c\udf10","text":"<p>Let's build a thriving community of coders! Share your thoughts, ask questions, or simply connect with fellow enthusiasts. Your participation makes this journey more exciting and enriching.</p>"},{"location":"#contribution","title":"Contribution \ud83e\udd1d","text":"<p>Contributions are always welcome! If you have a solution to a LeetCode problem that you'd like to share, or if you've come up with an interesting tip or trick, feel free to contribute. Together, we can make this platform even more valuable for aspiring coders.</p>"},{"location":"#upcoming-content","title":"Upcoming Content \ud83d\udcc5","text":"<p>Curious about what's coming next? Stay tuned for exciting tutorials, challenging problems, and insightful discussions. Get ready to level up your coding skills!</p> <p>Whether you're on a comeback journey or just here for the solutions, welcome to LeetCode Solutions \u2013 where we navigate the coding maze together! \ud83c\udf89</p>"},{"location":"problems/palindrome_number/","title":"Palindrome Numbers","text":""},{"location":"problems/palindrome_number/#problem-statement","title":"Problem Statement","text":"<p>Given an integer <code>x</code>, return true if <code>x</code> is a palindrome number. Palindrome numbers are those that read the same forwards and backwards. For example, 121 is a palindrome, while 123 is not.</p>"},{"location":"problems/palindrome_number/#constraints","title":"Constraints","text":"<ul> <li><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></li> </ul>"},{"location":"problems/palindrome_number/#approach-1-without-using-string","title":"Approach 1: Without Using String","text":"<ul> <li>Reverse the entire integer and compare it with the original</li> <li>Time Complexity: O(log(n)), where n is the number of digits in the input number.</li> <li>Space Complexity: O(1).</li> <li>This approach is also efficient, but it involves reversing the entire number.</li> </ul>"},{"location":"problems/palindrome_number/#flowchart","title":"Flowchart","text":"<pre><code>graph LR;\n    Start[Start] --&gt; CheckNegativeNum{num &gt;= 0}\n    CheckNegativeNum -- Yes --&gt; Initialize[Initialize variables]\n    CheckNegativeNum -- No --&gt; ReturnFalse[Return False]\n    Initialize --&gt; Loop[Start Loop]\n    Loop --&gt; |\"num &gt; 0\"| ExtractDigit[Extract rightmost digit of num]\n    Loop --&gt; |\"num == 0\"| EndLoop[End Loop]\n    ExtractDigit --&gt; CalculateReverse[Calculate reverse]\n    CalculateReverse --&gt; UpdateReverse[Update reverse]\n    CalculateReverse --&gt; UpdateNum[Update num]\n    UpdateReverse --&gt; Loop\n    UpdateNum --&gt; Loop\n    EndLoop --&gt; |\"reverse == original\"| ReturnTrue[Return True]\n    EndLoop --&gt; |\"reverse != original\"| ReturnFalse\n    ReturnTrue --&gt; End[End]\n    ReturnFalse --&gt; End\n\n    classDef startEnd fill:#9f9,stroke:#333,stroke-width:2px;\n    class Start,End startEnd;</code></pre>"},{"location":"problems/palindrome_number/#pseudocode","title":"Pseudocode","text":"<pre><code>function isPalindrome(x):\n    if x &lt; 0:\n        return False\n    original = x\n    reversed_x = 0\n    while x &gt; 0:\n        # Extract the last digit of x\n        last_digit = x % 10\n        # Append the last digit to the reversed number\n        reversed_x = reversed_x * 10 + last_digit\n        # Remove the last digit from x\n        x = x // 10\n    return original == reversed_x\n</code></pre>"},{"location":"problems/palindrome_number/#explanation","title":"Explanation","text":""},{"location":"problems/palindrome_number/#example-1-num-121","title":"Example 1: num = 121","text":"<ul> <li>The number <code>num</code> is not negative, so the condition <code>if num &lt; 0:</code> is not met.</li> <li>We initialize <code>reverse</code> to 0 and <code>original</code> to 121 (the original value of <code>num</code>).</li> <li>The <code>while</code> loop starts since <code>num &gt; 0</code>.</li> <li>In the first iteration:</li> <li><code>digit</code> is 121 % 10 = 1.<ul> <li><code>reverse</code> becomes 0 * 10 + 1 = 1.</li> <li><code>num</code> becomes 121 // 10 = 12.</li> </ul> </li> <li>In the second iteration:<ul> <li><code>digit</code> is 12 % 10 = 2.</li> <li><code>reverse</code> becomes 1 * 10 + 2 = 12.</li> <li><code>num</code> becomes 12 // 10 = 1.</li> </ul> </li> <li>In the third iteration:<ul> <li><code>digit</code> is 1 % 10 = 1.</li> <li><code>reverse</code> becomes 12 * 10 + 1 = 121.</li> <li><code>num</code> becomes 1 // 10 = 0.</li> </ul> </li> <li>The loop ends since <code>num</code> is no longer greater than 0.</li> <li>Finally, the function returns <code>reverse == original</code>, which is 121 == 121, so it returns True.</li> </ul>"},{"location":"problems/palindrome_number/#example-2-num-121","title":"Example 2: num = -121","text":"<ul> <li>Since <code>num</code> is negative, the function immediately returns False.</li> </ul>"},{"location":"problems/palindrome_number/#example-3-num-10","title":"Example 3: num = 10","text":"<ul> <li><code>num</code> is not negative.</li> <li>In the first iteration of the loop, <code>num</code> becomes 1 after removing the last digit.</li> <li>The loop ends, and the function returns <code>reverse == original</code>, which is 1 == 10, so it returns False.</li> </ul>"},{"location":"problems/palindrome_number/#solution-code-block","title":"Solution Code Block","text":"PythonC++RustGoJavaJavaScript Without Using String<pre><code>def is_palindrome(x: int) -&gt; bool:\n    if x &lt; 0:\n        return False\n    if x == 0:\n        return True\n    if x % 10 == 0:\n        return False\n    num_reversed = 0\n    original_x = x\n    while original_x &gt; 0:\n        last_digit = original_x % 10\n        num_reversed = num_reversed * 10 + last_digit\n        original_x //= 10\n    return x == num_reversed\n\nprint(is_palindrome(121))  # True\nprint(is_palindrome(-121))  # False\nprint(is_palindrome(10))  # False\n</code></pre> Without Using Strings<pre><code>#include &lt;iostream&gt;\n\nbool isPalindrome(int x) {\n    if (x &lt; 0) {\n        return false;\n    }\n    if (x == 0) {\n        return true;\n    }\n    if (x % 10 == 0) {\n        return false;\n    }\n    int numReversed = 0;\n    int originalX = x;\n    while (originalX &gt; 0) {\n        int lastDigit = originalX % 10;\n        numReversed = numReversed * 10 + lastDigit;\n        originalX /= 10;\n    }\n    return x == numReversed;\n}\n\nint main() {\n    std::cout &lt;&lt; std::boolalpha;\n    std::cout &lt;&lt; isPalindrome(121) &lt;&lt; std::endl;  // true\n    std::cout &lt;&lt; isPalindrome(-121) &lt;&lt; std::endl; // false\n    std::cout &lt;&lt; isPalindrome(10) &lt;&lt; std::endl;   // false\n    return 0;\n}\n</code></pre> Without Using String<pre><code>fn is_palindrome(x: i32) -&gt; bool {\n    if x &lt; 0 {\n        return false;\n    }\n    if x == 0 {\n        return true;\n    }\n    if x % 10 == 0 {\n        return false;\n    }\n    let mut num_reversed = 0;\n    let mut original_x = x;\n    while original_x &gt; 0 {\n        let last_digit = original_x % 10;\n        num_reversed = num_reversed * 10 + last_digit;\n        original_x /= 10;\n    }\n    x == num_reversed\n}\n\nfn main() {\n    println!(\"{}\", is_palindrome(121)); // true\n    println!(\"{}\", is_palindrome(-121)); // false\n    println!(\"{}\", is_palindrome(10)); // false\n}\n</code></pre> Without Using String<pre><code>package main\n\nimport \"fmt\"\n\nfunc isPalindrome(x int) bool {\n    if x &lt; 0 {\n        return false\n    }\n    if x == 0 {\n        return true\n    }\n    if x%10 == 0 {\n        return false\n    }\n    numReversed := 0\n    originalX := x\n    for originalX &gt; 0 {\n        lastDigit := originalX % 10\n        numReversed = numReversed*10 + lastDigit\n        originalX /= 10\n    }\n    return x == numReversed\n}\n\nfunc main() {\n    fmt.Println(isPalindrome(121))  // true\n    fmt.Println(isPalindrome(-121)) // false\n    fmt.Println(isPalindrome(10))   // false\n}\n</code></pre> Without Using String<pre><code>public class Palindrome {\n    public static boolean isPalindrome(int x) {\n        if (x &lt; 0) {\n            return false;\n        }\n        if (x == 0) {\n            return true;\n        }\n        if (x % 10 == 0) {\n            return false;\n        }\n        int numReversed = 0;\n        int originalX = x;\n        while (originalX &gt; 0) {\n            int lastDigit = originalX % 10;\n            numReversed = numReversed * 10 + lastDigit;\n            originalX /= 10;\n        }\n        return x == numReversed;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(121));  // true\n        System.out.println(isPalindrome(-121)); // false\n        System.out.println(isPalindrome(10));   // false\n    }\n}\n</code></pre> Without Using String<pre><code>function isPalindrome(x) {\n    if (x &lt; 0) {\n        return false;\n    }\n    if (x === 0) {\n        return true;\n    }\n    if (x % 10 === 0) {\n        return false;\n    }\n    let numReversed = 0;\n    let originalX = x;\n    while (originalX &gt; 0) {\n        const lastDigit = originalX % 10;\n        numReversed = numReversed * 10 + lastDigit;\n        originalX = Math.floor(originalX / 10);\n    }\n    return x === numReversed;\n}\n\nconsole.log(isPalindrome(121));  // true\nconsole.log(isPalindrome(-121)); // false\nconsole.log(isPalindrome(10));   // false\n</code></pre> <p>TryIt</p>"},{"location":"problems/palindrome_number/#approach-2-using-string","title":"Approach 2: Using String","text":"<ul> <li>Convert the integer to a string and then compare the string with its reverse.</li> <li>Time Complexity: O(n), where n is the number of digits in the input number.</li> <li>Space Complexity: O(n), where n is the number of digits in the input number.</li> <li>While this approach is straightforward, it requires additional space to store the string representation of the number.</li> </ul>"},{"location":"problems/palindrome_number/#flowchart_1","title":"Flowchart","text":"<pre><code>graph LR;\n    Start[Start] --&gt; ConvertToStr[Convert integer to string]\n    ConvertToStr --&gt; ReverseString[Reverse the string]\n    ReverseString --&gt; CompareStrings[Compare original and reversed strings]\n    CompareStrings --&gt; |\"strings are equal\"| ReturnTrue[Return True]\n    CompareStrings --&gt; |\"strings are not equal\"| ReturnFalse[Return False]\n    ReturnTrue --&gt; End[End]\n    ReturnFalse --&gt; End\n\n    classDef startEnd fill:#9f9,stroke:#333,stroke-width:2px;\n    class Start,End startEnd;</code></pre>"},{"location":"problems/palindrome_number/#pseudocode_1","title":"Pseudocode","text":"<pre><code>function isPalindrome(num):\n    // Convert the integer to a string\n    str_num = str(num)\n    // Reverse the string\n    reversed_str = str_num[::-1]\n    // Check if the original string is equal to the reversed string\n    if str_num == reversed_str:\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"problems/palindrome_number/#explanation_1","title":"Explanation","text":""},{"location":"problems/palindrome_number/#example-1-num-121_1","title":"Example 1: num = 121","text":"<ul> <li>We convert the integer 121 to the string \"121\".</li> <li>Reversing the string \"121\" gives us \"121\".</li> <li>Since the original string is equal to the reversed string, the function returns True.</li> </ul>"},{"location":"problems/palindrome_number/#example-2-num-121_1","title":"Example 2: num = -121","text":"<ul> <li>Converting a negative number to a string includes the negative sign, so \"-121\" is the string representation.</li> <li>Reversing the string \"-121\" gives us \"121-\", which is not equal to the original string.</li> <li>Therefore, the function returns False.</li> </ul>"},{"location":"problems/palindrome_number/#example-3-num-10_1","title":"Example 3: num = 10","text":"<ul> <li>Converting the integer 10 to a string gives us \"10\".</li> <li>Reversing the string \"10\" gives us \"01\", which is not equal to the original string.</li> <li>Thus, the function returns False.</li> </ul>"},{"location":"problems/palindrome_number/#solution-code-block_1","title":"Solution Code Block","text":"PythonC++RustGoJavaJavaScript With Using String<pre><code>def is_palindrome(x: int) -&gt; bool:\n    str_x = str(x)\n    return str_x == str_x[::-1]\n\nprint(is_palindrome(121))  # True\nprint(is_palindrome(-121)) # False\nprint(is_palindrome(10))   # False\n</code></pre> With Using String<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nbool isPalindrome(int x) {\n    std::string strX = std::to_string(x);\n    for (size_t i = 0; i &lt; strX.length() / 2; i++) {\n        if (strX[i] != strX[strX.length() - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::cout &lt;&lt; std::boolalpha;\n    std::cout &lt;&lt; isPalindrome(121) &lt;&lt; std::endl;  // true\n    std::cout &lt;&lt; isPalindrome(-121) &lt;&lt; std::endl; // false\n    std::cout &lt;&lt; isPalindrome(10) &lt;&lt; std::endl;   // false\n    return 0;\n}\n</code></pre> With Using String<pre><code>fn is_palindrome(x: i32) -&gt; bool {\n    let str_x = x.to_string();\n    str_x == str_x.chars().rev().collect::&lt;String&gt;()\n}\n\nfn main() {\n    println!(\"{}\", is_palindrome(121)); // true\n    println!(\"{}\", is_palindrome(-121)); // false\n    println!(\"{}\", is_palindrome(10)); // false\n}\n</code></pre> With Using String<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n)\n\nfunc isPalindrome(x int) bool {\n    strX := strconv.Itoa(x)\n    for i := 0; i &lt; len(strX)/2; i++ {\n        if strX[i] != strX[len(strX)-i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc main() {\n    fmt.Println(isPalindrome(121))  // true\n    fmt.Println(isPalindrome(-121)) // false\n    fmt.Println(isPalindrome(10))   // false\n}\n</code></pre> With Using String<pre><code>public class Palindrome {\n    public static boolean isPalindrome(int x) {\n        String strX = Integer.toString(x);\n        int n = strX.length();\n        for (int i = 0; i &lt; n / 2; i++) {\n            if (strX.charAt(i) != strX.charAt(n - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(121));  // true\n        System.out.println(isPalindrome(-121)); // false\n        System.out.println(isPalindrome(10));   // false\n    }\n}\n</code></pre> With Using String<pre><code>function isPalindrome(x) {\n    const strX = x.toString();\n    return strX === strX.split('').reverse().join('');\n}\n\nconsole.log(isPalindrome(121));  // true\nconsole.log(isPalindrome(-121)); // false\nconsole.log(isPalindrome(10));   // false\n</code></pre> <p>TryIt</p>"},{"location":"problems/two_sum/","title":"Two Sum","text":""},{"location":"problems/two_sum/#problem-statement","title":"Problem Statement","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.</p>"},{"location":"problems/two_sum/#constraints","title":"Constraints","text":"<ul> <li><code>2 &lt;= nums.length &lt;= 10^4</code></li> <li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li> <li><code>-10^9 &lt;= target &lt;= 10^9</code></li> </ul>"},{"location":"problems/two_sum/#approach-1-using-a-hash-map","title":"Approach 1: Using a Hash Map","text":"<p>Time Complexity: O(n)</p> <p>This approach has linear time complexity because we iterate through the array once and perform constant-time operations (such as checking if an element exists in the hash map).</p>"},{"location":"problems/two_sum/#flowchart","title":"Flowchart","text":"<pre><code>graph LR\n    Start --&gt; Initialize\n    Initialize --&gt; Loop\n    Loop --&gt; Calculate\n    Calculate --&gt; Check{Check if complement exists in hash map}\n    Check -- Yes --&gt; Return\n    Check -- No --&gt; Store\n    Store --&gt; Loop\n    Return --&gt; End</code></pre>"}]}